---
import DataSiteForm from "@/components/DataSiteForm.astro";

interface Props {
  className?: string;
}

const { className } = Astro.props;
---

<form class={className}>
  <div class="space-y-3">
    <DataSiteForm />
  </div>

  <div class="md:pl-8 space-y-3 w-full">
    <div class="flex flex-col gap-2">
      <label for="fiscal-data">Description</label>
      <textarea
        id="fiscal-data"
        name="fiscal-data"
        placeholder="Name,\nStreet, City,\nCountry, VAT Number"
        class="min-h-28"></textarea>
    </div>

    <div class="flex flex-col gap-2">
      <label for="stripe-token">API Secret</label>

      <section class="flex items-center gap-2">
        <input
          id="stripe-token"
          name="stripe-token"
          type="password"
          placeholder="sk_as1g516nd0..."
          class="w-full"
        />
        <button id="toggle-visibility" type="button">
          <svg
            id="open-eye"
            xmlns="http://www.w3.org/2000/svg"
            width="1em"
            height="1em"
            viewBox="0 0 24 24"
            ><path
              fill="currentColor"
              d="M12 9a3 3 0 0 0-3 3a3 3 0 0 0 3 3a3 3 0 0 0 3-3a3 3 0 0 0-3-3m0 8a5 5 0 0 1-5-5a5 5 0 0 1 5-5a5 5 0 0 1 5 5a5 5 0 0 1-5 5m0-12.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5"
            ></path></svg
          >
          <svg
            class="hidden"
            id="closed-eye"
            xmlns="http://www.w3.org/2000/svg"
            width="1em"
            height="1em"
            viewBox="0 0 24 24"
            ><path
              fill="currentColor"
              d="M11.83 9L15 12.16V12a3 3 0 0 0-3-3zm-4.3.8l1.55 1.55c-.05.21-.08.42-.08.65a3 3 0 0 0 3 3c.22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53a5 5 0 0 1-5-5c0-.79.2-1.53.53-2.2M2 4.27l2.28 2.28l.45.45C3.08 8.3 1.78 10 1 12c1.73 4.39 6 7.5 11 7.5c1.55 0 3.03-.3 4.38-.84l.43.42L19.73 22L21 20.73L3.27 3M12 7a5 5 0 0 1 5 5c0 .64-.13 1.26-.36 1.82l2.93 2.93c1.5-1.25 2.7-2.89 3.43-4.75c-1.73-4.39-6-7.5-11-7.5c-1.4 0-2.74.25-4 .7l2.17 2.15C10.74 7.13 11.35 7 12 7"
            ></path></svg
          >
        </button>
      </section>
    </div>

    <div class="flex flex-col gap-2">
      <label for="invoice-id">Invoice ID</label>
      <input
        id="invoice-id"
        name="invoice-id"
        type="text"
        placeholder="in_as42g16nd..."
        class="w-full"
      />
    </div>

    <button id="generator-btn" type="button" class="w-full primary"
      >Generate Invoice</button
    >
  </div>
</form>

<script>
  import html2pdf from "html2pdf.js";
  import { generateInvoice } from "../serivces/invoice.ts";
  import { siteData } from "@/stores/site-data.store";
import { stripe } from "@/stores/stripe.store";
import { siteConfig } from "@/stores/config.store";

  const title: HTMLInputElement | null = document.querySelector("#invoice-title");
  const description: HTMLTextAreaElement | null = document.querySelector("#invoice-description");
  const logo = document.querySelector("#invoice-logo");
  const contact: HTMLInputElement | null = document.querySelector("#contact");
  const fiscalData = document.querySelector("#fiscal-data");

  const btn = document.querySelector("#generator-btn");
  const idInput: HTMLInputElement | null =
    document.querySelector("#invoice-id");
  const tokenInput: HTMLInputElement | null =
    document.querySelector("#stripe-token");

  const toggleVisibilyBtn = document.querySelector("#toggle-visibility");
  const openEye = document.querySelector("#open-eye") as SVGElement;
  const closedEye = document.querySelector("#closed-eye") as SVGElement;

  let bufferedLogo: string | null = null;

  const handleGenerate = async () => {
    const id = idInput?.value;
    const token = tokenInput?.value;

    if (!id || !token) {
      return;
    }

    const text = await generateInvoice(
      {
        siteData: {
          title: title?.value || "",
          description: description?.textContent || "",
          image: bufferedLogo || "",
        },
        config: {
          fromEmail: contact?.value || "",
          fiscalData: fiscalData?.textContent || "",
        },
        id,
      },
      token
    );

    html2pdf().from(text).save("invoice.pdf");
  };

  btn?.addEventListener("click", handleGenerate);

  const handleVisibility = () => {
    if (tokenInput?.type === "password") {
      tokenInput?.setAttribute("type", "text");
      openEye.classList.add("hidden");
      closedEye.classList.remove("hidden");
    } else {
      tokenInput?.setAttribute("type", "password");
      openEye.classList.remove("hidden");
      closedEye.classList.add("hidden");
    }
  };

  toggleVisibilyBtn?.addEventListener("click", handleVisibility);

  const handleLogo = (e: Event) => {
    const file = (e.target as HTMLInputElement).files?.[0];

    if (!file) {
      return;
    }

    const reader = new FileReader();

    reader.onload = (e) => {
      bufferedLogo = e.target?.result as string;
      siteData.set({
        ...siteData.get(),
        image: bufferedLogo,
      });
    };

    reader.readAsDataURL(file);
  };

  logo?.addEventListener("change", handleLogo);

  tokenInput?.addEventListener("input", (e) => {
    const { value } = e.target! as HTMLInputElement;

    stripe.set({
      ...stripe.get(),
      token: value,
    });
  });

  fiscalData?.addEventListener("input", (e) => {
    const { value } = e.target! as HTMLInputElement;

    siteConfig.set({
      ...siteConfig.get(),
      fiscalData: value,
    });
  });

  tokenInput?.setAttribute("value", stripe.get().token);
  fiscalData!.innerHTML = siteConfig.get().fiscalData;
  bufferedLogo = siteData.get().image;
</script>
